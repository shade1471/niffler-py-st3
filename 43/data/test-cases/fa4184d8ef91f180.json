{
  "uid" : "fa4184d8ef91f180",
  "name" : "Наличие свойства required у полей имя пользователя и пароль",
  "fullName" : "test.test_auth.TestNegativeScenario#test_required_field",
  "historyId" : "a42991aca7d1494e84fb0dba166660b4",
  "time" : {
    "start" : 1750752668645,
    "stop" : 1750752668872,
    "duration" : 227
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: chrome=137.0.7151.103)\nStacktrace:\n#0 0x555c80270c9a <unknown>\n#1 0x555c7fd166e0 <unknown>\n#2 0x555c7fd0d7e7 <unknown>\n#3 0x555c7fcfe699 <unknown>\n#4 0x555c7fd003e0 <unknown>\n#5 0x555c7fcfea3d <unknown>\n#6 0x555c7fcfe3af <unknown>\n#7 0x555c7fcfe085 <unknown>\n#8 0x555c7fcfbeee <unknown>\n#9 0x555c7fcfc6ca <unknown>\n#10 0x555c7fd19c09 <unknown>\n#11 0x555c7fdb4ed5 <unknown>\n#12 0x555c7fd8de32 <unknown>\n#13 0x555c7fdb42cc <unknown>\n#14 0x555c7fd8dc03 <unknown>\n#15 0x555c7fd5a47b <unknown>\n#16 0x555c7fd5b0e1 <unknown>\n#17 0x555c8023544b <unknown>\n#18 0x555c8023937f <unknown>\n#19 0x555c8021cf89 <unknown>\n#20 0x555c80239f18 <unknown>\n#21 0x555c802016df <unknown>\n#22 0x555c8025e308 <unknown>\n#23 0x555c8025e4e6 <unknown>\n#24 0x555c8026fb76 <unknown>\n#25 0x7feac889caa4 <unknown>\n#26 0x7feac8929c3c <unknown>",
  "statusTrace" : "self = <test.test_auth.TestNegativeScenario object at 0x7ff2a8665590>\nbrowser = <python_test.model.niffler.Niffler object at 0x7ff2a82cee90>\nfield_name = 'user'\n\n    @allure.feature(Feature.log_in)\n    @allure.title('Наличие свойства required у полей имя пользователя и пароль')\n    @pytest.mark.parametrize('field_name', ['user', 'password'])\n    def test_required_field(self, browser: Niffler, field_name: str):\n        send_text_in_field = {'user': browser.login_page.fill_user_name, 'password': browser.login_page.fill_password}\n        element = {'user': LoginPage.USER_NAME_FIELD, 'password': LoginPage.PASSWORD_FIELD}\n>       browser.login_page.go_to_niffler()\n\ntest/test_auth.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmodel/LoginPage.py:20: in go_to_niffler\n    self.wd.get(self.base_url)\n/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:454: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff2a82cdd10>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...\\\\n#24 0x555c8026fb76 \\\\u003Cunknown>\\\\n#25 0x7feac889caa4 \\\\u003Cunknown>\\\\n#26 0x7feac8929c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: chrome=137.0.7151.103)\nE       Stacktrace:\nE       #0 0x555c80270c9a <unknown>\nE       #1 0x555c7fd166e0 <unknown>\nE       #2 0x555c7fd0d7e7 <unknown>\nE       #3 0x555c7fcfe699 <unknown>\nE       #4 0x555c7fd003e0 <unknown>\nE       #5 0x555c7fcfea3d <unknown>\nE       #6 0x555c7fcfe3af <unknown>\nE       #7 0x555c7fcfe085 <unknown>\nE       #8 0x555c7fcfbeee <unknown>\nE       #9 0x555c7fcfc6ca <unknown>\nE       #10 0x555c7fd19c09 <unknown>\nE       #11 0x555c7fdb4ed5 <unknown>\nE       #12 0x555c7fd8de32 <unknown>\nE       #13 0x555c7fdb42cc <unknown>\nE       #14 0x555c7fd8dc03 <unknown>\nE       #15 0x555c7fd5a47b <unknown>\nE       #16 0x555c7fd5b0e1 <unknown>\nE       #17 0x555c8023544b <unknown>\nE       #18 0x555c8023937f <unknown>\nE       #19 0x555c8021cf89 <unknown>\nE       #20 0x555c80239f18 <unknown>\nE       #21 0x555c802016df <unknown>\nE       #22 0x555c8025e308 <unknown>\nE       #23 0x555c8025e4e6 <unknown>\nE       #24 0x555c8026fb76 <unknown>\nE       #25 0x7feac889caa4 <unknown>\nE       #26 0x7feac8929c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: WebDriverException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "[S]  Session Faker",
    "time" : {
      "start" : 1750752663406,
      "stop" : 1750752663408,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "[S] Envs",
    "time" : {
      "start" : 1750752663409,
      "stop" : 1750752663409,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "[C] Browser",
    "time" : {
      "start" : 1750752667221,
      "stop" : 1750752668265,
      "duration" : 1044
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "[S] App User",
    "time" : {
      "start" : 1750752663409,
      "stop" : 1750752663576,
      "duration" : 167
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Создать пользователя 'qa_guru'",
      "time" : {
        "start" : 1750752663409,
        "stop" : 1750752663575,
        "duration" : 166
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "user_name",
        "value" : "'qa_guru'"
      }, {
        "name" : "user_password",
        "value" : "'qa_guru'"
      } ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: chrome=137.0.7151.103)\nStacktrace:\n#0 0x555c80270c9a <unknown>\n#1 0x555c7fd166e0 <unknown>\n#2 0x555c7fd0d7e7 <unknown>\n#3 0x555c7fcfe699 <unknown>\n#4 0x555c7fd003e0 <unknown>\n#5 0x555c7fcfea3d <unknown>\n#6 0x555c7fcfe3af <unknown>\n#7 0x555c7fcfe085 <unknown>\n#8 0x555c7fcfbeee <unknown>\n#9 0x555c7fcfc6ca <unknown>\n#10 0x555c7fd19c09 <unknown>\n#11 0x555c7fdb4ed5 <unknown>\n#12 0x555c7fd8de32 <unknown>\n#13 0x555c7fdb42cc <unknown>\n#14 0x555c7fd8dc03 <unknown>\n#15 0x555c7fd5a47b <unknown>\n#16 0x555c7fd5b0e1 <unknown>\n#17 0x555c8023544b <unknown>\n#18 0x555c8023937f <unknown>\n#19 0x555c8021cf89 <unknown>\n#20 0x555c80239f18 <unknown>\n#21 0x555c802016df <unknown>\n#22 0x555c8025e308 <unknown>\n#23 0x555c8025e4e6 <unknown>\n#24 0x555c8026fb76 <unknown>\n#25 0x7feac889caa4 <unknown>\n#26 0x7feac8929c3c <unknown>",
    "statusTrace" : "self = <test.test_auth.TestNegativeScenario object at 0x7ff2a8665590>\nbrowser = <python_test.model.niffler.Niffler object at 0x7ff2a82cee90>\nfield_name = 'user'\n\n    @allure.feature(Feature.log_in)\n    @allure.title('Наличие свойства required у полей имя пользователя и пароль')\n    @pytest.mark.parametrize('field_name', ['user', 'password'])\n    def test_required_field(self, browser: Niffler, field_name: str):\n        send_text_in_field = {'user': browser.login_page.fill_user_name, 'password': browser.login_page.fill_password}\n        element = {'user': LoginPage.USER_NAME_FIELD, 'password': LoginPage.PASSWORD_FIELD}\n>       browser.login_page.go_to_niffler()\n\ntest/test_auth.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmodel/LoginPage.py:20: in go_to_niffler\n    self.wd.get(self.base_url)\n/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:454: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff2a82cdd10>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...\\\\n#24 0x555c8026fb76 \\\\u003Cunknown>\\\\n#25 0x7feac889caa4 \\\\u003Cunknown>\\\\n#26 0x7feac8929c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: chrome=137.0.7151.103)\nE       Stacktrace:\nE       #0 0x555c80270c9a <unknown>\nE       #1 0x555c7fd166e0 <unknown>\nE       #2 0x555c7fd0d7e7 <unknown>\nE       #3 0x555c7fcfe699 <unknown>\nE       #4 0x555c7fd003e0 <unknown>\nE       #5 0x555c7fcfea3d <unknown>\nE       #6 0x555c7fcfe3af <unknown>\nE       #7 0x555c7fcfe085 <unknown>\nE       #8 0x555c7fcfbeee <unknown>\nE       #9 0x555c7fcfc6ca <unknown>\nE       #10 0x555c7fd19c09 <unknown>\nE       #11 0x555c7fdb4ed5 <unknown>\nE       #12 0x555c7fd8de32 <unknown>\nE       #13 0x555c7fdb42cc <unknown>\nE       #14 0x555c7fd8dc03 <unknown>\nE       #15 0x555c7fd5a47b <unknown>\nE       #16 0x555c7fd5b0e1 <unknown>\nE       #17 0x555c8023544b <unknown>\nE       #18 0x555c8023937f <unknown>\nE       #19 0x555c8021cf89 <unknown>\nE       #20 0x555c80239f18 <unknown>\nE       #21 0x555c802016df <unknown>\nE       #22 0x555c8025e308 <unknown>\nE       #23 0x555c8025e4e6 <unknown>\nE       #24 0x555c8026fb76 <unknown>\nE       #25 0x7feac889caa4 <unknown>\nE       #26 0x7feac8929c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: WebDriverException",
    "steps" : [ {
      "name" : "Перейти на страницу авторизации Niffler",
      "time" : {
        "start" : 1750752668645,
        "stop" : 1750752668870,
        "duration" : 225
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: chrome=137.0.7151.103)\nStacktrace:\n#0 0x555c80270c9a <unknown>\n#1 0x555c7fd166e0 <unknown>\n#2 0x555c7fd0d7e7 <unknown>\n#3 0x555c7fcfe699 <unknown>\n#4 0x555c7fd003e0 <unknown>\n#5 0x555c7fcfea3d <unknown>\n#6 0x555c7fcfe3af <unknown>\n#7 0x555c7fcfe085 <unknown>\n#8 0x555c7fcfbeee <unknown>\n#9 0x555c7fcfc6ca <unknown>\n#10 0x555c7fd19c09 <unknown>\n#11 0x555c7fdb4ed5 <unknown>\n#12 0x555c7fd8de32 <unknown>\n#13 0x555c7fdb42cc <unknown>\n#14 0x555c7fd8dc03 <unknown>\n#15 0x555c7fd5a47b <unknown>\n#16 0x555c7fd5b0e1 <unknown>\n#17 0x555c8023544b <unknown>\n#18 0x555c8023937f <unknown>\n#19 0x555c8021cf89 <unknown>\n#20 0x555c80239f18 <unknown>\n#21 0x555c802016df <unknown>\n#22 0x555c8025e308 <unknown>\n#23 0x555c8025e4e6 <unknown>\n#24 0x555c8026fb76 <unknown>\n#25 0x7feac889caa4 <unknown>\n#26 0x7feac8929c3c <unknown>\n\n",
      "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/niffler-py-st3/niffler-py-st3/python_test/model/LoginPage.py\", line 20, in go_to_niffler\n    self.wd.get(self.base_url)\n    ~~~~~~~~~~~^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py\", line 454, in get\n    self.execute(Command.GET, {\"url\": url})\n    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "browser::0",
    "time" : {
      "start" : 1750752669266,
      "stop" : 1750752669343,
      "duration" : 77
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Негативные сценарии"
  }, {
    "name" : "feature",
    "value" : "Авторизация пользователя"
  }, {
    "name" : "epic",
    "value" : "Приложение Niffler"
  }, {
    "name" : "host",
    "value" : "fv-az1384-32"
  }, {
    "name" : "thread",
    "value" : "6810-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_auth"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "field_name",
    "value" : "'user'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 1,
        "unknown" : 0,
        "total" : 2
      },
      "items" : [ {
        "uid" : "8da5f5ea29d04730",
        "reportUrl" : "https://shade1471.github.io/niffler-py-st3/42/#testresult/8da5f5ea29d04730",
        "status" : "passed",
        "time" : {
          "start" : 1750735607064,
          "stop" : 1750735607679,
          "duration" : 615
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "fa4184d8ef91f180.json",
  "parameterValues" : [ "'user'" ]
}