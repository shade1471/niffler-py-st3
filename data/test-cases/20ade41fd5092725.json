{
  "uid" : "20ade41fd5092725",
  "name" : "Отправка запроса на дружбу",
  "fullName" : "test.test_soap.TestSoapNiffler#test_send_invitation",
  "historyId" : "cd841d96460c2483f99e75e82349843b",
  "time" : {
    "start" : 1750648690009,
    "stop" : 1750648690223,
    "duration" : 214
  },
  "status" : "broken",
  "statusMessage" : "sqlalchemy.exc.NoResultFound: No row was found when one was required",
  "statusTrace" : "self = <test.test_soap.TestSoapNiffler object at 0x7fb33e43be10>\nsoap_session = <python_test.utils.sessions.SoapSession object at 0x7fb33e4c4830>\nenvs = Envs(frontend_url='http://frontend.niffler.dc', gateway_url='http://gateway.niffler.dc:8090', auth_url='http://auth.ni...stgresql+psycopg2://postgres:secret@gateway.niffler.dc:5432/niffler-userdata', soap_address='http://localhost:8089/ws')\nuserdata_db = <python_test.databases.usertdata_db.UserdataDb object at 0x7fb33e4c4ad0>\n\n    @allure.title('Отправка запроса на дружбу')\n    def test_send_invitation(self, soap_session, envs, userdata_db):\n        user_1, user_2 = fake.name(), fake.name()\n        with allure.step(f'Создать пользователей {user_1} и {user_2} в системе'):\n            UserApiHelper(envs).create_user(user_1, fake.password(special_chars=False))\n            UserApiHelper(envs).create_user(user_2, fake.password(special_chars=False))\n            user_1_from_db = userdata_db.get_user(user_1)\n>           user_2_from_db = userdata_db.get_user(user_2)\n\ntest/test_soap.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ndatabases/usertdata_db.py:32: in get_user\n    return session.exec(statement).one()\n/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/sqlalchemy/engine/result.py:1808: in one\n    return self._only_one_row(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.engine.result.ScalarResult object at 0x7fb33dd26940>\nraise_for_second_row = True, raise_for_none = True, scalar = False\n\n    def _only_one_row(\n        self,\n        raise_for_second_row: bool,\n        raise_for_none: bool,\n        scalar: bool,\n    ) -> Optional[_R]:\n        onerow = self._fetchone_impl\n    \n        row: Optional[_InterimRowType[Any]] = onerow(hard_close=True)\n        if row is None:\n            if raise_for_none:\n>               raise exc.NoResultFound(\n                    \"No row was found when one was required\"\n                )\nE               sqlalchemy.exc.NoResultFound: No row was found when one was required\n\n/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/sqlalchemy/engine/result.py:752: NoResultFound",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "[S]  Session Faker",
    "time" : {
      "start" : 1750648685064,
      "stop" : 1750648685066,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "[S] App User",
    "time" : {
      "start" : 1750648685067,
      "stop" : 1750648685758,
      "duration" : 691
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Создать пользователя 'qa_guru'",
      "time" : {
        "start" : 1750648685068,
        "stop" : 1750648685758,
        "duration" : 690
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "user_name",
        "value" : "'qa_guru'"
      }, {
        "name" : "user_password",
        "value" : "'qa_guru'"
      } ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "[S] Userdata Db",
    "time" : {
      "start" : 1750648687913,
      "stop" : 1750648687914,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "[S] Envs",
    "time" : {
      "start" : 1750648685067,
      "stop" : 1750648685067,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "[M] Soap Session",
    "time" : {
      "start" : 1750648687914,
      "stop" : 1750648687914,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "sqlalchemy.exc.NoResultFound: No row was found when one was required",
    "statusTrace" : "self = <test.test_soap.TestSoapNiffler object at 0x7fb33e43be10>\nsoap_session = <python_test.utils.sessions.SoapSession object at 0x7fb33e4c4830>\nenvs = Envs(frontend_url='http://frontend.niffler.dc', gateway_url='http://gateway.niffler.dc:8090', auth_url='http://auth.ni...stgresql+psycopg2://postgres:secret@gateway.niffler.dc:5432/niffler-userdata', soap_address='http://localhost:8089/ws')\nuserdata_db = <python_test.databases.usertdata_db.UserdataDb object at 0x7fb33e4c4ad0>\n\n    @allure.title('Отправка запроса на дружбу')\n    def test_send_invitation(self, soap_session, envs, userdata_db):\n        user_1, user_2 = fake.name(), fake.name()\n        with allure.step(f'Создать пользователей {user_1} и {user_2} в системе'):\n            UserApiHelper(envs).create_user(user_1, fake.password(special_chars=False))\n            UserApiHelper(envs).create_user(user_2, fake.password(special_chars=False))\n            user_1_from_db = userdata_db.get_user(user_1)\n>           user_2_from_db = userdata_db.get_user(user_2)\n\ntest/test_soap.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ndatabases/usertdata_db.py:32: in get_user\n    return session.exec(statement).one()\n/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/sqlalchemy/engine/result.py:1808: in one\n    return self._only_one_row(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.engine.result.ScalarResult object at 0x7fb33dd26940>\nraise_for_second_row = True, raise_for_none = True, scalar = False\n\n    def _only_one_row(\n        self,\n        raise_for_second_row: bool,\n        raise_for_none: bool,\n        scalar: bool,\n    ) -> Optional[_R]:\n        onerow = self._fetchone_impl\n    \n        row: Optional[_InterimRowType[Any]] = onerow(hard_close=True)\n        if row is None:\n            if raise_for_none:\n>               raise exc.NoResultFound(\n                    \"No row was found when one was required\"\n                )\nE               sqlalchemy.exc.NoResultFound: No row was found when one was required\n\n/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/sqlalchemy/engine/result.py:752: NoResultFound",
    "steps" : [ {
      "name" : "Создать пользователей Corey Briggs и Kelly Hunt в системе",
      "time" : {
        "start" : 1750648690010,
        "stop" : 1750648690222,
        "duration" : 212
      },
      "status" : "broken",
      "statusMessage" : "sqlalchemy.exc.NoResultFound: No row was found when one was required\n",
      "statusTrace" : "  File \"/home/runner/work/niffler-py-st3/niffler-py-st3/python_test/test/test_soap.py\", line 84, in test_send_invitation\n    user_2_from_db = userdata_db.get_user(user_2)\n  File \"/home/runner/work/niffler-py-st3/niffler-py-st3/python_test/databases/usertdata_db.py\", line 32, in get_user\n    return session.exec(statement).one()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/sqlalchemy/engine/result.py\", line 1808, in one\n    return self._only_one_row(\n           ~~~~~~~~~~~~~~~~~~^\n        raise_for_second_row=True, raise_for_none=True, scalar=False\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"/opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/sqlalchemy/engine/result.py\", line 752, in _only_one_row\n    raise exc.NoResultFound(\n        \"No row was found when one was required\"\n    )\n",
      "steps" : [ {
        "name" : "Создать пользователя 'Corey Briggs'",
        "time" : {
          "start" : 1750648690010,
          "stop" : 1750648690121,
          "duration" : 111
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "user_name",
          "value" : "'Corey Briggs'"
        }, {
          "name" : "user_password",
          "value" : "'fY8xi5uL9C'"
        } ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      }, {
        "name" : "Создать пользователя 'Kelly Hunt'",
        "time" : {
          "start" : 1750648690121,
          "stop" : 1750648690219,
          "duration" : 98
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "user_name",
          "value" : "'Kelly Hunt'"
        }, {
          "name" : "user_password",
          "value" : "'7RqzBXqfqg'"
        } ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      } ],
      "attachments" : [ {
        "uid" : "b6f91ea602b6cfc4",
        "name" : "SELECT niffler-userdata",
        "source" : "b6f91ea602b6cfc4.txt",
        "type" : "text/plain",
        "size" : 187
      }, {
        "uid" : "68e59347c250d695",
        "name" : "SELECT niffler-userdata",
        "source" : "68e59347c250d695.txt",
        "type" : "text/plain",
        "size" : 185
      } ],
      "parameters" : [ ],
      "stepsCount" : 2,
      "attachmentsCount" : 2,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "d7e10e13011d24d6",
      "name" : "log",
      "source" : "d7e10e13011d24d6.txt",
      "type" : "text/plain",
      "size" : 197
    } ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "SOAP"
  }, {
    "name" : "epic",
    "value" : "Приложение Niffler"
  }, {
    "name" : "host",
    "value" : "fv-az1068-91"
  }, {
    "name" : "thread",
    "value" : "10200-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_soap"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "20ade41fd5092725.json",
  "parameterValues" : [ ]
}